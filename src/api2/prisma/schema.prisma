// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id       String @id @default(uuid())
  email    String @unique
  name     String
  password String

  role UserRole @default(USER)

  products Product[] @relation(fields: [productId], references: [id])

  productId String?

  reviews Review[] @relation(fields: [reviewId], references: [id])

  reviewId String?

  orders Order[] @relation(fields: [orderId], references: [id])

  orderId String?


  createdAt DateTime @default(now()) @map("created_at")

  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("users")
}

model Product {
  id String @id @default(uuid())

  name String

  description String

  price Int


  numReviews Int

  countInStock Int

  user User[] @relation(fields: [userId], references: [id], onDelete: Cascade)

  userId String

  productId String


  order Order[] @relation(fields: [orderId], references: [id], onDelete: Cascade)

  orderId String

  createdAt DateTime @default(now()) @map("created_at")

  updatedAt DateTime @default(now()) @map("updated_at")



  @@map("products")
}

model Review {
  id String @id @default(uuid())

  name String

  rating Int

  comment String

  user User[] @relation(fields: [userId], references: [id], onDelete: Cascade)

  userId String
}

model Order {
  id String @id @default(uuid())

  products Product[] @relation(fields: [productId], references: [id])

  productId String?

  user User[] @relation(fields: [userId], references: [id], onDelete: Cascade)

  userId String

}
