name: CI / unit tests
on:
  push:
    branches: [dev]
  pull_request:
    branches: [dev, main]
env: 
  CORS_ORIGIN: ${{ secrets.CORS_ORIGIN }}
  SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
  DATABASE_URL: ${{ secrets.SESSION_SECRET }}
  REDIS_URL: ${{ secrets.REDIS_URL }}
  PORT: ${{ secrets.PORT }}
  FRONTEND_URL: ${{ secrets.FRONTEND_URL }}
  CLOUDINARY_SECRET: ${{ secrets.CLOUDINARY_SECRET }}
  STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
  MAILGUN_API_KEY: ${{ secrets.MAILGUN_API_KEY }}
  EMAIL_DOMAIN_NAME: ${{ secrets.EMAIL_DOMAIN_NAME }}
  
jobs:
  db:
    runs-on: ubuntu-latest
    container: postgres
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: storify
          POSTGRES_PASSWORD: storify
          POSTGRES_USER: storify
        ports:
          - 5432/tcp

        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5


    steps:
      - name: Setup node
        uses: luke-h1/setup-node@v2
        with:
          node-version: 14 

      - name: Install Yarn
        run: npm install -g yarn

      - name: Start redis
        uses: luke-h1/redis-github-action@1.4.0

      - name: Checkout
        uses: luke-h1/checkout@v2

      - name: Use latest npm version
        run: npm i -g npm@latest

      - name: Install dependencies
        run: yarn

      - name: Build and start backend
        run: |
          yarn workspace @storify/api build
          yarn workspace @storify/api start

      - name: Check backend is running
        run: | 
            http_response=$(curl -s -o response.txt -w "%{http_code}" https://localhost:8000/api/health)
            if [ $http_response != "200" ]; then
              echo "server not running, exiting CI"
              exit 1
            else
              echo "Server running"
              exit 0
            cat response.txt    
            fi

      - name: run backend tests
        run: yarn workspace @storify/api test
